<?php
namespace Smooler\Traits;

use Tooler\Core\Exceptions\Mysql;

// escape only where and data
// 只允许where和data通过tcp传参，防止sql注入
trait Model
{
	protected $config_name;

	function __construct($configName)
	{
		$this->config_name = $configName;
	}

	function __get($key) 
	{
		switch ($key) {
			case 'write':
				global $app;
				$mysql = $app->context->get('mysql_' . $this->config_name . '_write');
				if (!$mysql) {
	            	$configs = &$app->config->get('mysql.' . $this->config_name . '.write');
		            $mysql = $app->mysql->handle($configs);
		            $app->context->put('mysql_' . $this->config_name . '_write', $mysql);
				}
				return $mysql;
				break;
			case 'read':
				global $app;
				$mysql = $app->context->get('mysql_' . $this->config_name . '_read');
				if (!$mysql) {
	            	$configs = &$app->config->get('mysql.' . $this->config_name . '.read');
	            	if (!$configs) {
						return $this->write;
	            	}
		            $mysql = $app->mysql->handle($configs);
		            $app->context->put('mysql_' . $this->config_name . '_read', $mysql);
				}
				return $mysql;
				break;
		}
	}

	public function whereStr(&$where, $isMaster = false) 
	{
		$whereStr = '';
		foreach ($where as $value) {
			if (!in_array($value[1], ['=', '>', '>=', '<', '<=', 'in', 'like', 'is', 'is not'])) {
				throw new Mysql(0, 'sql compare error :' . $value[0]);
			}
			switch ($value[1]) {
				case 'in':
					if (is_array($value[2])) {
						$valueTemp = '';
						foreach ($value[2] as $val) {
							if (is_string($val)) {
								$val = '"' . $this->escape($val, $isMaster) . '"';
							} elseif (!is_int($val) && !is_float($val)) {
								throw new Mysql(0, 'sql value error :' . $value[0]);
							}
							if (!$valueTemp) {
								$valueTemp .= '(' . $val;
							} else {
								$valueTemp .= ',' . $val;
							}
						}
						if ($valueTemp) {
							$valueTemp .= ')';
						}
						$value[2] = $valueTemp;
					} else {
						throw new Mysql(0, 'sql value error :' . $value[0]);
					}
					break;
				default:
					if (is_string($value[2])) {
						$value[2] = '"' . $this->escape($value[2], $isMaster) . '"';
					} elseif (null === $value[2]) {
						$value[2] = 'null';
					} elseif (is_array($value[2]) && isset($value[2]['raw']) && is_string($value[2]['raw'])) {
						$value[2] = $this->escape($value[2]['raw'], $isMaster);
					} elseif (!is_int($value[2]) && !is_float($value[2])) {
						throw new Mysql(0, 'sql value error :' . $value[0]);
					}
					break;
			}
			if (!$whereStr) {
				$whereStr .= $value[0] . ' ' . $value[1] . ' ' . $value[2];
			} else {
				$whereStr .= ' AND ' . $value[0] . ' ' . $value[1] . ' ' . $value[2];
			}
		}
		return $whereStr;
	}

	public function insert(&$data, $ignoreDuplicate = false) 
	{
		if ($data) {
			$query = 'INSERT INTO ' . $this->table  . ' ';
			$collumnStr = '';
			$valueStr = '';
			foreach ($data as $key => $value) {
				if (!$collumnStr) {
					$collumnStr .= $key;
				} else {
					$collumnStr .= ', ' . $key;
				}
				if (is_string($value)) {
					$value = '"' . $this->escape($value, true) . '"';
				} elseif (is_null($value)) {
					$value = 'null';
				} elseif (!is_int($value) && !is_float($value)) {
					throw new Mysql(0, 'sql value error :' . $key);
				}
				if (!$valueStr) {
					$valueStr .= $value;
				} else {
					$valueStr .= ', ' . $value;
				}
			}
			$query = $query . '(' . $collumnStr . ')' . 'VALUES(' . $valueStr . ')';
			if ($ignoreDuplicate) {
				$query .= ' ON DUPLICATE KEY UPDATE created_time = created_time';
			}
			$this->query($query, true);
			return $this->write->affected_rows;
		}
	}

	public function delete(&$where) 
	{
		if ($where) {
			$query = 'DELETE FROM ' . $this->table;
			$whereStr = $this->whereStr($where, true);
			if (!$whereStr) {
				throw new Mysql(0, 'sql where string error');
			}
			$query = $query . ' WHERE ' . $whereStr;
			$this->query($query, true);
			return $this->write->affected_rows;
		}
	}

	public function update(&$where, &$data, $ignoreDuplicate = false) 
	{
		if ($where && $data) {
			$query = 'UPDATE ' . $this->table  . ' SET ';
			$whereStr = $this->whereStr($where, true);
			if (!$whereStr) {
				throw new Mysql(0, 'sql where string error');
			}
			$valueSts = '';
			foreach ($data as $key => $value) {
				if (is_string($value)) {
					$value = '"' . $this->escape($value, true) . '"';
				} elseif (is_null($value)) {
					$value = 'null';
				} elseif (!is_int($value) && !is_float($value)) {
					throw new Mysql(0, 'sql value error :' . $key);
				}
				if (!$valueSts) {
					$valueSts .= $key . '=' . $value;
				} else {
					$valueSts .= ',' . $key . '=' . $value;
				}
			}
			$query = $query . $valueSts . ' WHERE ' . $whereStr;
			if ($ignoreDuplicate) {
				$query .= ' ON DUPLICATE KEY UPDATE created_time = created_time';
			}
			$this->query($query, true);
			return $this->write->affected_rows;
		}
	}

	public function increase(&$where, $collumn, $number = 1) 
	{
		if ($where && $collumn && 0 < $number) {
			$query = 'UPDATE ' . $this->table  . ' SET ';
			$whereStr = $this->whereStr($where, true);
			if (!$whereStr) {
				throw new Mysql(0, 'sql where string error');
			}
			$query = $query . $collumn . ' = ' . $collumn . ' + ' . $number . ' WHERE ' . $whereStr;
			$this->query($query, true);
			return $this->write->affected_rows;
		}
	}

	public function decrease(&$where, $collumn, $number = 1) 
	{
		if ($where && $collumn && 0 < $number) {
			$query = 'UPDATE ' . $this->table  . ' SET ';
			$whereStr = $this->whereStr($where, true);
			if (!$whereStr) {
				throw new Mysql(0, 'sql where string error');
			}
			$query = $query . $collumn . ' = ' . $collumn . ' - ' . $number . ' WHERE ' . $whereStr;
			$this->query($query, true);
			return $this->write->affected_rows;
		}
	}

	public function find(&$where, &$collumns, $orderStr = '', $groupStr = '', $isMaster = false) 
	{
		if ($collumns) { 
			$whereStr = '';
			$collumnStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			foreach ($collumns as $value) {
				if (!$collumnStr) {
					$collumnStr .= $value; 
				} else {
					$collumnStr .= ', ' . $value;
				}
			}
			if ($orderStr) {
				$orderStr = ' ORDER BY ' . $orderStr;
			}
			if ($groupStr) {
				$groupStr = ' GROUP BY ' . $groupStr;
			}
			$query = 'SELECT ' . $collumnStr . ' FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '') . $groupStr . $orderStr . ' LIMIT 1';
			$res = $this->query($query, $isMaster);
			return $res ? $res[0] : null;
		}
	}

	public function get(&$where, &$collumns, $orderStr = '', $limit = null, $offset = null, $groupStr = '', $isMaster = false) 
	{
		if ($collumns) {
			$whereStr = '';
			$collumnStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}

			foreach ($collumns as $value) {
				if (!$collumnStr) {
					$collumnStr .= $value;
				} else {
					$collumnStr .= ', ' . $value;
				}
			}
			if ($orderStr) {
				$orderStr = ' ORDER BY ' . $orderStr;
			}
			if ($groupStr) {
				$groupStr = ' GROUP BY ' . $groupStr;
			}
			$query = 'SELECT ' . $collumnStr . ' FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '') . $groupStr . $orderStr . (($limit !== null) ? (' LIMIT ' . $limit) : '') . (($offset !== null) ? (' OFFSET ' . $offset) : '');
			$res = $this->query($query, $isMaster);
			return $res ? $res : [];
		}
	}

	public function value(&$where, $collumn, $orderStr = '', $groupStr = '', $isMaster = false) 
	{
		$res = $this->find($where, [$collumn], $orderStr, $groupStr, $isMaster);
		if ($res) {
			return $res[$collumn];
		}
	}

	public function count(&$where, $isMaster = false) 
	{
		$whereStr = '';
		if ($where) {
			$whereStr = $this->whereStr($where, $isMaster);
		}
		$query = 'SELECT count(1) as count FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '');
		$res = $this->query($query, $isMaster);
		if ($res) {
			return $res[0]['count'];
		} else {
			throw new Mysql(0, 'sql count error');
		}
	}

	public function avg(&$where, $collumn, $isMaster = false) 
	{
		if ($collumn) {
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT avg(' . $collumn . ') as avg FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['avg'];
			} else {
				throw new Mysql(0, 'sql avg error');
			}
		}
	}

	public function min(&$where, $collumn, $isMaster = false) 
	{
		if ($collumn) {
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT min(' . $collumn . ') as min FROM ' . $this->table  . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['min'];
			} else {
				throw new Mysql(0, 'sql min error');
			}
		}
	}

	public function max(&$where, $collumn, $isMaster = false) 
	{
		if ($collumn) {
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT max(' . $collumn . ') as max FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['max'];
			} else {
				throw new Mysql(0, 'sql max error');
			}
		}
	}

	public function sum(&$where, $collumn, $isMaster = false) 
	{
		if ($collumn) {
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT sum(' . $collumn . ') as sum FROM ' . $this->table . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['sum'];
			} else {
				throw new Mysql(0, 'sql sum error');
			}
		}
	}

	public function joinFind($alias, &$joins, $onStr, &$where, &$collumns, $orderStr = '', $groupStr = '', $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			$collumnStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			foreach ($collumns as $value) {
				if (!$collumnStr) {
					$collumnStr .= $value;
				} else {
					$collumnStr .= ', ' . $value;
				}
			}
			if ($orderStr) {
				$orderStr = ' ORDER BY ' . $orderStr;
			}
			if ($groupStr) {
				$groupStr = ' GROUP BY ' . $groupStr;
			}
			$query = 'SELECT ' . $collumnStr . ' FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '') . $groupStr . $orderStr . ' LIMIT 1';
			$res = $this->query($query, $isMaster);
			return $res ? $res[0] : null;
		}
	}

	public function joinGet($alias, &$joins, $onStr, &$where, &$collumns, $orderStr = '', $limit = null, $offset = null, $groupStr = '', $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			$collumnStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			if ($orderStr) {
				$orderStr = ' ORDER BY ' . $orderStr;
			}
			if ($groupStr) {
				$groupStr = ' GROUP BY ' . $groupStr;
			}
			foreach ($collumns as $value) {
				if (!$collumnStr) {
					$collumnStr .= $value;
				} else {
					$collumnStr .= ', ' . $value;
				}
			}

			$query = 'SELECT ' . $collumnStr . ' FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '') . $groupStr . $orderStr . (($limit !== null) ? (' LIMIT ' . $limit) : '') . (($offset !== null) ? (' OFFSET ' . $offset) : '');
			$res = $this->query($query, $isMaster);
			return $res ? $res : [];
		}
	}

	public function joinValue($alias, &$joins, $onStr, &$where, $collumn, $orderStr = '', $groupStr = '', $isMaster = false) 
	{
		$res = $this->find($alias, &$joins, $onStr, $where, [$collumn], $orderStr, $groupStr, $isMaster);
		if ($res) {
			return $res[$collumn];
		}
	}

	public function joinCount($alias, &$joins, $onStr, &$where, $isMaster = false) 
	{
		$joinStr = '';
		foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
		}
		$whereStr = '';
		if ($where) {
			$whereStr = $this->whereStr($where, $isMaster);
		}
		$query = 'SELECT count(1) as count FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '');
		$res = $this->query($query, $isMaster);
		if ($res) {
			return $res[0]['count'];
		} else {
			throw new Mysql(0, 'sql count error');
		}
	}

	public function joinAvg($alias, &$joins, $onStr, &$where, $collumn, $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT avg(' . $collumn . ') as avg FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['avg'];
			} else {
				throw new Mysql(0, 'sql avg error');
			}
		}
	}

	public function joinMin($alias, &$joins, $onStr, &$where, $collumn, $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT min(' . $collumn . ') as min FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['min'];
			} else {
				throw new Mysql(0, 'sql min error');
			}
		}
	}

	public function joinMax($alias, &$joins, $onStr, &$where, $collumn, $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT max(' . $collumn . ') as max FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['max'];
			} else {
				throw new Mysql(0, 'sql max error');
			}
		}
	}

	public function joinSum($alias, &$joins, $onStr, &$where, $collumn, $isMaster = false) 
	{
		if ($collumns && $joins) {
			$joinStr = '';
			foreach ($joins as $value) {
				$joinStr .= ' INNER JOIN ' . $value;
			}
			$whereStr = '';
			if ($where) {
				$whereStr = $this->whereStr($where, $isMaster);
			}
			$query = 'SELECT sum(' . $collumn . ') as sum FROM ' . $this->table . ' as ' . $alias . $joinStr . ' ' . $onStr . ($whereStr ? (' WHERE ' . $whereStr) : '');
			$res = $this->query($query, $isMaster);
			if ($res) {
				return $res[0]['sum'];
			} else {
				throw new Mysql(0, 'sql sum error');
			}
		}
	}

	public function query($query, $isMaster = false, $repeat = false) 
	{
		$this->clear();
		if ($isMaster) {
			$res = $this->write->query($query);
		} else {
			$res = $this->read->query($query);
		}
		if (false === $res) {
			var_dump($query);
	        if (2006 == ($isMaster ? $this->write->errno : $this->read->errno) || 2013 == ($isMaster ? $this->write->errno : $this->read->errno)) {
				var_dump('mysql close');
				if (!$repeat) {
					global $app;
		        	if ($isMaster) {
			            $app->context->delete('mysql_' . $this->config_name . '_write');
		        	} else {
			            $app->context->delete('mysql_' . $this->config_name . '_read');
		        	}
		        	return $this->query($query, $isMaster, true); 
				}
	        }
			throw new Mysql(($isMaster ? $this->write->errno : $this->read->errno) ?? 0, ($isMaster ? $this->write->error : $this->read->error) ?? '未知错误');
		}
		return $res;
	}

	public function begin() 
	{
		$this->write->begin();
	}

	public function commit() 
	{
		$this->write->commit();
	}

	public function rollback() 
	{
		$this->write->rollback();
	}

	public function lastInsertId() 
	{
		return $this->write->insert_id ?? 0;
	}
	
	public function escape($str, $isMaster = false) 
	{
		if ($isMaster) {
			return $this->write->escape($str);
		} else {
			return $this->read->escape($str);
		}
	}
}
